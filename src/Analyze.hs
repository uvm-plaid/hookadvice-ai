module Analyze where

import UVMHS
import Syntax

data BDD n a =
    LeafBDD a
  | NodeBDD n (BDD n a) (BDD n a)
makePrettySum ''BDD

-- node ‚à∑ n ‚Üí BDD n a ‚Üí BDD n a ‚Üí BDD n a
-- node l (BDD m x‚ÇÅ x‚ÇÇ) (BDD n y‚ÇÅ y‚ÇÇ)
-- -- l m n =
-- -- T T T x‚ÇÅ
-- -- T T F x‚ÇÅ
-- -- T F T x‚ÇÇ
-- -- T F F x‚ÇÇ
-- -- F T T y‚ÇÅ
-- -- F T F y‚ÇÇ
-- -- F F T y‚ÇÅ
-- -- F F F y‚ÇÇ
--   | (l ‚â° m) ‚©ì (l ‚â° n) = NodeBDD l x‚ÇÅ y‚ÇÇ
--   | (l ‚â° m) ‚©ì (l < n) = NodeBDD l x‚ÇÅ (NodeBDD n y‚ÇÅ y‚ÇÇ)
--   | (l ‚â° m) ‚©ì (l > n) = NodeBDD n (NodeBDD l x‚ÇÅ y‚ÇÅ) (NodeBDD l x‚ÇÅ y‚ÇÇ)
--   | (l < m) ‚©ì (l ‚â° n) = NodeBDD l (NodeBDD m x‚ÇÅ x‚ÇÇ) y‚ÇÇ
--   | (l < m) ‚©ì (l < n) = NodeBDD l (BDD m x‚ÇÅ x‚ÇÇ) (BDD n y‚ÇÅ y‚ÇÇ)
--   | (l < m) ‚©ì (l > n) = undefined
--   | (l > m) ‚©ì (l ‚â° n) = undefined
--   | (l > m) ‚©ì (l < n) = undefined
--   | (l > m) ‚©ì (l > n) = undefined

instance Functor (BDD n) where
  map f (LeafBDD x) = LeafBDD $ f x
  map f (NodeBDD n x y) = NodeBDD n (map f x) (map f y)

binBDD ‚à∑ (Ord n) ‚áí (a ‚Üí b ‚Üí c) ‚Üí BDD n a ‚Üí BDD n b ‚Üí BDD n c
binBDD f (LeafBDD x) (LeafBDD y) = LeafBDD $ x `f` y
binBDD f (NodeBDD n x‚ÇÅ x‚ÇÇ) (LeafBDD y) = NodeBDD n (map (`f` y) x‚ÇÅ) (map (`f` y) x‚ÇÇ)
binBDD f (LeafBDD x) (NodeBDD n y‚ÇÅ y‚ÇÇ) = NodeBDD n (map (x `f`) y‚ÇÅ) (map (x `f`) y‚ÇÇ)
binBDD f (NodeBDD m x‚ÇÅ x‚ÇÇ) (NodeBDD n y‚ÇÅ y‚ÇÇ)
  | m < n     = NodeBDD m (binBDD f x‚ÇÅ (NodeBDD n y‚ÇÅ y‚ÇÇ)) (binBDD f x‚ÇÇ (NodeBDD n y‚ÇÅ y‚ÇÇ))
  | m ‚â° n     = NodeBDD m (binBDD f x‚ÇÅ y‚ÇÅ) (binBDD f x‚ÇÇ y‚ÇÇ)
  | otherwise = NodeBDD n (binBDD f (NodeBDD m x‚ÇÅ x‚ÇÇ) y‚ÇÅ) (binBDD f (NodeBDD m x‚ÇÅ x‚ÇÇ) y‚ÇÇ)

instance ToIter a (BDD n a) where
  iter (LeafBDD x) = single x
  iter (NodeBDD _ x y) = iter x ‚ß∫ iter y

instance (Bot l) ‚áí Bot (BDD n l) where bot = LeafBDD bot
instance (Ord n,Join l) ‚áí Join (BDD n l) where (‚äî) = binBDD (‚äî)
instance (Ord n,POrd l) ‚áí POrd (BDD n l) where x ‚äë y = and $ iter $ binBDD (‚äë) x y

type AEvent p = (Lab ‚àß Lab) ‚á∞ p
type CAEvent p = ùëÉ (AEvent p)

-- -- Œ∑‚ôØ ‚àà event‚ôØ ‚âú label √ó label ‚Ü¶ security
-- data AEvent p = 
--     PureEv (ùëÉ ((Lab ‚àß Lab) ‚á∞ p))
--   | CondEv (ùïä ‚àß ùïä ‚àß ùïä) (AEvent p) (AEvent p)
-- 
-- makePrettySum ''AEvent
-- 
-- instance (Ord p) ‚áí Bot (AEvent p) where bot = PureEv p√∏
-- instance (Ord p) ‚áí Join (AEvent p) where
--   PureEv Œ∏As‚ÇÅ ‚äî PureEv Œ∏As‚ÇÇ = PureEv $ Œ∏As‚ÇÅ ‚à™ Œ∏As‚ÇÇ
--   CondEv c ae‚ÇÅ ae‚ÇÇ ‚äî PureEv Œ∏As = CondEv c (ae‚ÇÅ ‚äî PureEv Œ∏As) (ae‚ÇÇ ‚äî PureEv Œ∏As)
--   PureEv Œ∏As ‚äî CondEv c ae‚ÇÅ ae‚ÇÇ = CondEv c (PureEv Œ∏As ‚äî ae‚ÇÅ) (PureEv Œ∏As ‚äî ae‚ÇÇ)
--   CondEv c‚ÇÅ ae‚ÇÅ‚ÇÅ ae‚ÇÅ‚ÇÇ ‚äî CondEv c‚ÇÇ ae‚ÇÇ‚ÇÅ ae‚ÇÇ‚ÇÇ 
--     | c‚ÇÅ < c‚ÇÇ   = CondEv c‚ÇÅ (ae‚ÇÅ‚ÇÅ ‚äî CondEv c‚ÇÇ ae‚ÇÇ‚ÇÅ ae‚ÇÇ‚ÇÇ) (ae‚ÇÅ‚ÇÇ ‚äî CondEv c‚ÇÇ ae‚ÇÇ‚ÇÅ ae‚ÇÇ‚ÇÇ)
--     | c‚ÇÅ ‚â° c‚ÇÇ   = CondEv c‚ÇÅ (ae‚ÇÅ‚ÇÅ ‚äî ae‚ÇÇ‚ÇÅ) (ae‚ÇÅ‚ÇÇ ‚äî ae‚ÇÇ‚ÇÇ)
--     | otherwise = CondEv c‚ÇÇ (CondEv c‚ÇÅ ae‚ÇÅ‚ÇÅ ae‚ÇÅ‚ÇÇ  ‚äî ae‚ÇÇ‚ÇÅ) (CondEv c‚ÇÅ ae‚ÇÅ‚ÇÅ ae‚ÇÅ‚ÇÇ  ‚äî ae‚ÇÇ‚ÇÇ)
-- instance (Ord p) ‚áí POrd (AEvent p) where
--   PureEv Œ∏As‚ÇÅ ‚äë PureEv Œ∏As‚ÇÇ = Œ∏As‚ÇÅ ‚äÜ Œ∏As‚ÇÇ
--   CondEv _ ae‚ÇÅ ae‚ÇÇ ‚äë PureEv Œ∏As = (ae‚ÇÅ ‚äë PureEv Œ∏As) ‚©ì (ae‚ÇÇ ‚äë PureEv Œ∏As)
--   PureEv Œ∏As ‚äë CondEv _ ae‚ÇÅ ae‚ÇÇ = (PureEv Œ∏As ‚äë ae‚ÇÅ) ‚©ì (PureEv Œ∏As ‚äë ae‚ÇÇ)
--   CondEv c‚ÇÅ ae‚ÇÅ‚ÇÅ ae‚ÇÅ‚ÇÇ ‚äë CondEv c‚ÇÇ ae‚ÇÇ‚ÇÅ ae‚ÇÇ‚ÇÇ 
--     | c‚ÇÅ < c‚ÇÇ   = (ae‚ÇÅ‚ÇÅ ‚äë CondEv c‚ÇÇ ae‚ÇÇ‚ÇÅ ae‚ÇÇ‚ÇÇ) ‚©ì (ae‚ÇÅ‚ÇÇ ‚äë CondEv c‚ÇÇ ae‚ÇÇ‚ÇÅ ae‚ÇÇ‚ÇÇ)
--     | c‚ÇÅ ‚â° c‚ÇÇ   = (ae‚ÇÅ‚ÇÅ ‚äë ae‚ÇÇ‚ÇÅ) ‚©ì (ae‚ÇÅ‚ÇÇ ‚äë ae‚ÇÇ‚ÇÇ)
--     | otherwise = (CondEv c‚ÇÅ ae‚ÇÅ‚ÇÅ ae‚ÇÅ‚ÇÇ  ‚äë ae‚ÇÇ‚ÇÅ) ‚©ì (CondEv c‚ÇÅ ae‚ÇÅ‚ÇÅ ae‚ÇÅ‚ÇÇ ‚äë ae‚ÇÇ‚ÇÇ)

eventA ‚à∑ (Ord p,Top p) ‚áí Event p ‚Üí BDD (ùïä‚àßùïä‚àßùïä) (CAEvent p)
eventA = \case
  Flow ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ ‚Üí LeafBDD $ single $ (‚Ñì‚ÇÅ :* ‚Ñì‚ÇÇ) ‚Ü¶ top
  FlowJoin ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ Œ± ‚Üí LeafBDD $ single $ ((‚Ñì‚ÇÅ :* LtnL Œ±) ‚Ü¶ top) ‚©å ((‚Ñì‚ÇÇ :* LtnL Œ±) ‚Ü¶ top)
  FlowMeet ‚Ñì p Œ± ‚Üí LeafBDD $ single $ (‚Ñì :* LtnL Œ±) ‚Ü¶ p
  Check s o c ‚Üí NodeBDD (s :* o :* c) (LeafBDD (single d√∏)) (LeafBDD p√∏)

(‚ãâ) ‚à∑ (Ord p,Join p,Meet p) ‚áí AEvent p ‚Üí AEvent p ‚Üí AEvent p
Œ∏A‚ÇÅ ‚ãâ Œ∏A‚ÇÇ = joins $ 
  [ Œ∏A‚ÇÅ
  , Œ∏A‚ÇÇ
  , joins $ do
      ‚Ñì‚ÇÅ‚ÇÅ :* ‚Ñì‚ÇÅ‚ÇÇ :* p‚ÇÅ ‚Üê list Œ∏A‚ÇÅ
      ‚Ñì‚ÇÇ‚ÇÅ :* ‚Ñì‚ÇÇ‚ÇÇ :* p‚ÇÇ ‚Üê list Œ∏A‚ÇÇ
      case ‚Ñì‚ÇÅ‚ÇÇ ‚â° ‚Ñì‚ÇÇ‚ÇÅ of
        True ‚Üí return $ (‚Ñì‚ÇÅ‚ÇÅ :* ‚Ñì‚ÇÇ‚ÇÇ) ‚Ü¶ (p‚ÇÅ ‚äì p‚ÇÇ)
        False ‚Üí return d√∏
    ]

(‚ãâ‚ãÜ) ‚à∑ (Ord p,Join p,Meet p) ‚áí CAEvent p ‚Üí CAEvent p ‚Üí CAEvent p
Œ∏As‚ÇÅ ‚ãâ‚ãÜ Œ∏As‚ÇÇ = joins
  [ Œ∏As‚ÇÅ
  , pow $ do
      Œ∏A‚ÇÅ ‚Üê list Œ∏As‚ÇÅ
      Œ∏A‚ÇÇ ‚Üê list Œ∏As‚ÇÇ
      return $ Œ∏A‚ÇÅ ‚ãâ Œ∏A‚ÇÇ
  ]

(‚àù) ‚à∑ (Ord p,Join p,Meet p) ‚áí BDD (ùïä‚àßùïä‚àßùïä) (CAEvent p) ‚Üí BDD (ùïä‚àßùïä‚àßùïä) (CAEvent p) ‚Üí BDD (ùïä‚àßùïä‚àßùïä) (CAEvent p)
(‚àù) = binBDD (‚ãâ‚ãÜ)

interpAbsR ‚à∑ (Ord p,Top p,Join p,Meet p) ‚áí ùïä ‚á∞ BDD (ùïä‚àßùïä‚àßùïä) (CAEvent p) ‚Üí Eff p ‚Üí BDD (ùïä‚àßùïä‚àßùïä) (CAEvent p)
interpAbsR Œ≥ = \case
  Emp ‚Üí LeafBDD p√∏
  Eps ‚Üí LeafBDD $ single d√∏
  Ev Œ∑ ‚Üí eventA Œ∑
  h‚ÇÅ :| h‚ÇÇ ‚Üí interpAbsR Œ≥ h‚ÇÅ ‚äî interpAbsR Œ≥ h‚ÇÇ
  h‚ÇÅ :‚®ü h‚ÇÇ ‚Üí interpAbsR Œ≥ h‚ÇÅ ‚àù interpAbsR Œ≥ h‚ÇÇ
  Var x ‚Üí Œ≥ ‚ãï! x
  Mu x h ‚Üí lfp bot $ \ Œ∑A ‚Üí interpAbsR ((x ‚Ü¶ Œ∑A) ‚©å Œ≥) h

interpAbs ‚à∑ (Ord p,Top p,Join p,Meet p) ‚áí Eff p ‚Üí BDD (ùïä‚àßùïä‚àßùïä) (ùëÉ (Lab ‚àß p ‚àß Lab))
interpAbs h =
  let hAB = interpAbsR d√∏ h
  in mapOn hAB $ \ hA ‚Üí pow $ do
    ‚Ñì‚ÇÅ  :* ‚Ñì‚ÇÇ :* p ‚Üê list $ joins hA
    return $ ‚Ñì‚ÇÅ :* p :* ‚Ñì‚ÇÇ

interpAbsPost ‚à∑ (Ord p,Top p,Join p,Meet p) ‚áí Eff p ‚Üí BDD (ùïä‚àßùïä‚àßùïä) (ùëÉ (Sub ‚àß p ‚àß Sub))
interpAbsPost h = 
  mapOn (interpAbs h) $ \ hA ‚Üí pow $ do
    ‚Ñì‚ÇÅ :* p :* ‚Ñì‚ÇÇ ‚Üê list hA
    case (‚Ñì‚ÇÅ,‚Ñì‚ÇÇ) of
      (SubL s‚ÇÅ,SubL s‚ÇÇ) | s‚ÇÅ ‚â¢ s‚ÇÇ ‚Üí return $ s‚ÇÅ :* p :* s‚ÇÇ
      _ ‚Üí mzero

printPost ‚à∑ BDD (ùïä‚àßùïä‚àßùïä) (ùëÉ (Sub ‚àß Bool ‚àß Sub)) ‚Üí Doc
printPost (LeafBDD rs)
  | isEmpty rs = ppLit "<none>"
  | otherwise = ppVertical $ mapOn (list rs) $ \ (s‚ÇÅ :* p :* s‚ÇÇ) ‚Üí
  case p of
    True ‚Üí ppHorizontal $ list
      [ ppText s‚ÇÅ , ppPun "‚Üù" , ppText s‚ÇÇ ]
    False ‚Üí 
      let pD = ppLit "L"
      in ppHorizontal $ list
        [ ppText s‚ÇÅ , ppPun "‚äì" , pD , ppPun "‚Üù" , ppText s‚ÇÇ ]
printPost (NodeBDD (s :* o :* p) x y) = ppVertical $ list
  [ concat [ppText "CHECK(",ppText s,ppText ",",ppText o,ppText ",",ppText p,ppText ")"]
  , concat [ppSpace 2,ppAlign $ printPost x]
  , concat [ppText "¬¨CHECK(",ppText s,ppText ",",ppText o,ppText ",",ppText p,ppText ")"]
  , concat [ppSpace 2,ppAlign $ printPost y]
  ]
